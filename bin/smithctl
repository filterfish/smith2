#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'smith'

module Smith
  class SmithControl

    include Logger

    def initialize
      log_level(:info)
    end

    def send_command(command, args, &blk)
      begin
        send("#{Command.command_type(command)}_command", command, args, &blk)
      rescue Smith::Command::UnknownCommandError => e
        puts e.message
        Smith.stop(true)
      end
    end

    private

    def smithctl_command(command, args, &blk)
      Smith.channel.on_error do |ch,channel_close|
        case channel_close.reply_code
        when 404
          puts "No such queue: #{extract_queue(channel_close.reply_text)}"
        when 406
          puts "Queue in use: #{extract_queue(channel_close.reply_text)}"
        else
          puts channel_close.reply_text
          puts channel_close.reply_code
        end
      end

      responder = Messaging::Responder.new
      responder.callback do |v|
        puts v if v
        Smith.stop(true)
      end

      Command.run(command, args, :responder => responder)
    end

    def extract_queue(message)
      match = /.*?'(.*?)'.*$/.match(message) #[1]
      if match && match[1]
        match[1].sub(/smith\./, '')
      else
        message
      end
    end

    def agency_command(command, args, &blk)
      Messaging::Sender.new('agency.control', :auto_delete => true, :durable => false, :persistent => true,  :strict => true).ready do |sender|

        sender.timeout(8) { puts "Timeout. Is the agency still running"; Smith.stop(true) }

        payload = ACL::Payload.new(:agency_command).content(:command => command, :args => args)

        callback = proc do |sender|
          sender.publish_and_receive(payload) do |r|
            blk.call(r.payload)
          end
        end

        errback = proc do puts "Agency not running"
          Smith.stop(true)
        end

        sender.consumers?(callback, errback)
      end
    end
  end
end

command = ARGV.shift
args = ARGV

command || (puts "usage #{File.basename($0)} <command> opts]"; exit 2)

trap 'INT', proc { (Smith.running?) ? Smith.stop(true) : exit}

Smith.load_acls

control = Smith::SmithControl.new

Smith.on_error do
  Smith.stop(true)
end

Smith.start(:quiet => true) do
  control.send_command(command, args) do |result|
    puts result if result && !result.empty?
    Smith.stop(true)
  end
end
